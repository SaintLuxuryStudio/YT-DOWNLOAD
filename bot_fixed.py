import os
import re
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from downloader_yt_dlp import YouTubeDownloader

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TelegramYTBot:
    def __init__(self, token: str):
        self.token = token
        self.downloader = YouTubeDownloader()
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
            f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.\n"
            f"–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç: –≤–∏–¥–µ–æ (MP4) –∏–ª–∏ –∞—É–¥–∏–æ (MP3)."
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = """
–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ
2. –í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
3. –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç: –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ
4. –î–æ–∂–¥–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–æ–ª—É—á–∏ —Ñ–∞–π–ª

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
‚Ä¢ MP4 –¥–ª—è –≤–∏–¥–µ–æ
‚Ä¢ MP3 –¥–ª—è –∞—É–¥–∏–æ

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 1.9 –ì–ë
        """
        await update.message.reply_text(help_text)
    
    def is_youtube_url(self, text: str) -> bool:
        youtube_regex = re.compile(
            r'(https?://)?(www\.)?(youtube|youtu|youtube-nocookie)\.(com|be)/'
            r'(watch\?v=|embed/|v/|.+\?v=)?([^&=%\?]{11})'
        )
        return bool(youtube_regex.match(text))
    
    def create_progress_callback(self, query, context):
        progress_data = {'query': query, 'context': context, 'current_progress': 0}
        last_pct = [0]
        
        def progress_callback(stream, chunk, bytes_remaining):
            try:
                total = stream.filesize
                done = total - bytes_remaining
                pct = int(done / total * 100)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5%
                if pct >= last_pct[0] + 5:
                    progress_data['current_progress'] = pct
                    last_pct[0] = pct
                    logger.info(f"Progress: {pct}%")
            except Exception as e:
                logger.error(f"Progress callback error: {e}")
        
        progress_callback.progress_data = progress_data
        return progress_callback
    
    async def update_progress_periodically(self, progress_callback, query):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        last_shown_progress = 0
        
        while True:
            try:
                await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                
                current_progress = progress_callback.progress_data.get('current_progress', 0)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 5%
                if current_progress >= last_shown_progress + 5:
                    await query.edit_message_text(f"‚è¨ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {current_progress}%")
                    last_shown_progress = current_progress
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in progress update: {e}")
                break
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message_text = update.message.text
        
        if not self.is_youtube_url(message_text):
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ."
            )
            return
        
        await self.process_youtube_url(update, context, message_text)
    
    async def process_youtube_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
        try:
            status_message = await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —Ç–∞–∫ –∫–∞–∫ yt-dlp —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
            loop = asyncio.get_event_loop()
            info = await loop.run_in_executor(None, self.downloader.get_video_info, url)
            
            if not info:
                await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
                return
            
            resolutions = await loop.run_in_executor(None, self.downloader.get_available_resolutions, info)
            if not resolutions:
                await status_message.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                return
            
            title = info.get('title', 'Unknown')
            duration = info.get('duration', 0)
            view_count = info.get('view_count', 0)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ –∫–∞—á–µ—Å—Ç–≤–∞
            video_resolutions = [res for res in resolutions if res != 'audio']
            for i in range(0, len(video_resolutions), 2):
                row = []
                for j in range(2):
                    if i + j < len(video_resolutions):
                        res = video_resolutions[i + j]
                        row.append(InlineKeyboardButton(f"üìπ {res}", callback_data=f"video_{res}"))
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞—É–¥–∏–æ
            keyboard.append([InlineKeyboardButton("üéµ MP3 Audio", callback_data="audio")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await status_message.edit_text(
                f"üìπ –í–∏–¥–µ–æ: {title}\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration // 60}:{duration % 60:02d}\n"
                f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {view_count:,}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
                reply_markup=reply_markup
            )
            
            context.user_data['video_info'] = {
                'url': url,
                'info': info,
                'resolutions': resolutions,
                'status_message': status_message
            }
            
        except Exception as e:
            logger.error(f"Error processing URL: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        video_info = context.user_data.get('video_info')
        if not video_info:
            await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
            return
        
        callback_data = query.data
        
        if callback_data == "audio":
            await self.download_and_send_callback(query, context, resolution="audio", audio_only=True)
        elif callback_data.startswith("video_"):
            resolution = callback_data.replace("video_", "")
            await self.download_and_send_callback(query, context, resolution=resolution)
    
    async def download_and_send_callback(self, query, context: ContextTypes.DEFAULT_TYPE, 
                                        resolution: str = None, audio_only: bool = False):
        try:
            video_info = context.user_data.get('video_info')
            if not video_info:
                await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
                return
            
            await query.edit_message_text("‚è¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            
            progress_callback = self.create_progress_callback(query, context)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_task = asyncio.create_task(self.update_progress_periodically(progress_callback, query))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            try:
                result = await loop.run_in_executor(
                    None, 
                    self.downloader.download_video,
                    video_info['url'], 
                    resolution,
                    progress_callback
                )
            finally:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_task.cancel()
                try:
                    await progress_task
                except asyncio.CancelledError:
                    pass
            
            if not result:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.")
                return
            
            video_path, title = result
            
            if audio_only:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ —ç—Ç–æ MP3 —Ñ–∞–π–ª
                if video_path.endswith('.mp3'):
                    audio_path = video_path
                    await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
                else:
                    await query.edit_message_text("üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...")
                    audio_path = await loop.run_in_executor(None, self.downloader.convert_to_mp3, video_path)
                
                if audio_path:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = os.path.getsize(audio_path)
                    max_size = 50 * 1024 * 1024  # 50 MB –ª–∏–º–∏—Ç –¥–ª—è –∞—É–¥–∏–æ –≤ Telegram
                    
                    if file_size > max_size:
                        size_mb = file_size / (1024 * 1024)
                        await query.edit_message_text(
                            f"‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} MB).\n"
                            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∞—É–¥–∏–æ: 50 MB.\n"
                            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–æ –∞—É–¥–∏–æ."
                        )
                        self.downloader.cleanup_file(video_path)
                        if audio_path != video_path:
                            self.downloader.cleanup_file(audio_path)
                        return
                    
                    if not video_path.endswith('.mp3'):
                        await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
                    
                    with open(audio_path, 'rb') as audio_file:
                        await context.bot.send_audio(
                            chat_id=query.message.chat_id,
                            audio=audio_file,
                            title=title[:50],
                            caption=f"üéµ {title}",
                            read_timeout=300,
                            write_timeout=300,
                            connect_timeout=60,
                            pool_timeout=60
                        )
                    
                    self.downloader.cleanup_file(video_path)
                    if audio_path != video_path:
                        self.downloader.cleanup_file(audio_path)
                    await query.edit_message_text("‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3.")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(video_path)
                max_size = 2000 * 1024 * 1024  # 2000 MB (–ø–æ—á—Ç–∏ 2GB) –ª–∏–º–∏—Ç –¥–ª—è –≤–∏–¥–µ–æ –≤ Telegram
                
                if file_size > max_size:
                    size_mb = file_size / (1024 * 1024)
                    await query.edit_message_text(
                        f"‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} MB).\n"
                        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ: 2000 MB.\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
                    )
                    self.downloader.cleanup_file(video_path)
                    return
                
                await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
                
                with open(video_path, 'rb') as video_file:
                    await context.bot.send_video(
                        chat_id=query.message.chat_id,
                        video=video_file,
                        caption=f"üìπ {title}",
                        supports_streaming=True,
                        read_timeout=300,
                        write_timeout=300,
                        connect_timeout=60,
                        pool_timeout=60
                    )
                
                self.downloader.cleanup_file(video_path)
                await query.edit_message_text("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
            context.user_data.pop('video_info', None)
            
        except Exception as e:
            logger.error(f"Error in download_and_send_callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")
    
    async def download_and_send(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               resolution: str = None, audio_only: bool = False):
        try:
            video_info = context.user_data.get('video_info')
            if not video_info:
                await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
                return
            
            status_message = video_info['status_message']
            await status_message.edit_text("‚è¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            
            progress_callback = self.create_progress_callback(status_message)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None, 
                self.downloader.download_video,
                video_info['url'], 
                resolution,
                progress_callback
            )
            
            if not result:
                await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.")
                return
            
            video_path, title = result
            
            if audio_only:
                await status_message.edit_text("üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ MP3...")
                audio_path = await loop.run_in_executor(None, self.downloader.convert_to_mp3, video_path)
                
                if audio_path:
                    await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ...")
                    
                    with open(audio_path, 'rb') as audio_file:
                        await context.bot.send_audio(
                            chat_id=update.effective_chat.id,
                            audio=audio_file,
                            title=title[:50],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
                            caption=f"üéµ {title}"
                        )
                    
                    self.downloader.cleanup_file(video_path)
                    self.downloader.cleanup_file(audio_path)
                    await status_message.edit_text("‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                else:
                    await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MP3.")
            else:
                await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
                
                with open(video_path, 'rb') as video_file:
                    await context.bot.send_video(
                        chat_id=update.effective_chat.id,
                        video=video_file,
                        caption=f"üìπ {title}",
                        supports_streaming=True
                    )
                
                self.downloader.cleanup_file(video_path)
                await status_message.edit_text("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
            context.user_data.pop('video_info', None)
            
        except Exception as e:
            logger.error(f"Error in download_and_send: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")
    
    def run(self):
        self.application.run_polling()

def main():
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
        return
    
    bot = TelegramYTBot(token)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    bot.run()

if __name__ == '__main__':
    main()